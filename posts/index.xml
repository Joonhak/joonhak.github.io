<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 프린이의 DEVLOG</title>
        <link>https://joonhak.github.io/posts/</link>
        <description>Recent content in Posts on 프린이의 DEVLOG</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 02 Apr 2019 18:06:22 +0900</lastBuildDate>
        <atom:link href="https://joonhak.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>면접왕GDG</title>
            <link>https://joonhak.github.io/posts/%EB%A9%B4%EC%A0%91%EC%99%95gdg/</link>
            <pubDate>Tue, 02 Apr 2019 18:06:22 +0900</pubDate>
            
            <guid>https://joonhak.github.io/posts/%EB%A9%B4%EC%A0%91%EC%99%95gdg/</guid>
            <description>이번에 이직을 생각하면서 내가 면접을 제대로 본 적이 없다는것을 깨닳음과 동시에 스터디를 찾는 도중 면접왕GDG라는 오프라인 세미나? 비슷한걸 찾아서 당장 신청해서 다녀왔다.
최근에 다녀온건 아니고 아이패드 노트 작성시간을 확인해보니까 2월 26일에 작성했던데.. 정신놓고 살다가 얼마전에 면접을 다녀 온 후로 진짜 너무 정리를 안했다는 자책과 함께 이제라도 정리해 보고자 작성한다.
사실은 좀 지각을 해서.. 망할 6시 30분 퇴근! 총 5개? 회사에서 말씀을 해주신거같은데.. 제대로 들은건 두 회사밖에 없지만 그것만으로도 나름 엄청난 도움이 되었다고 생각이 되서 앞 회사들의 이야기를 못들은것이 더욱 안타깝지만 뭐, 별 수 있나 들은거라도 정리해야지.</description>
            <content type="html"><![CDATA[

<p>이번에 이직을 생각하면서 내가 면접을 <code>제대로</code> 본 적이 없다는것을 깨닳음과 동시에 스터디를 찾는 도중
면접왕GDG라는 오프라인 세미나? 비슷한걸 찾아서 당장 신청해서 다녀왔다.</p>

<p>최근에 다녀온건 아니고
아이패드 노트 작성시간을 확인해보니까 2월 26일에 작성했던데.. 정신놓고 살다가 얼마전에 면접을 다녀 온 후로
진짜 너무 정리를 안했다는 자책과 함께 이제라도 정리해 보고자 작성한다.</p>

<p>사실은 좀 지각을 해서.. <del>망할 6시 30분 퇴근!</del> 총 5개? 회사에서 말씀을 해주신거같은데.. 제대로 들은건 두 회사밖에 없지만
그것만으로도 나름 엄청난 도움이 되었다고 생각이 되서 앞 회사들의 이야기를 못들은것이 더욱 안타깝지만
뭐, 별 수 있나 들은거라도 정리해야지.</p>

<p><del>사실 회사 이름을 밝혀도 상관 없을거같긴 한데.. 혹시 몰라 적지 않겠다.</del></p>

<h2 id="첫번째-회사-스타트업이-원하는-개발자">첫번째 회사 - 스타트업이 원하는 개발자</h2>

<p>첫번째 회사는 이제 시작하는 스타트업이었다. 개인적으로 스타트업에 관심이 많던차라 굉장히 흥미롭게 들었다.</p>

<h3 id="빠르게-성장하는-하고있는-스타트업이-원하는-개발자는">빠르게 성장하는 (하고있는) 스타트업이 원하는 개발자는?</h3>

<ul>
<li>회사 비전에 공감하는 사람</li>
<li>Code reviewer</li>
<li>회고하는 사람</li>
<li>생산적인 Proccess 를 고민하는 사람<br /></li>
</ul>

<p>위 네가지를 해당 기업에서는 가장 중요하게 생각하는 부분이라고 한다. ( 물론 기업에 따라 다를 수도 있다. )
사실 회고라는걸 제대로 해본적이 없던터라 반성을 많이 했던 대목이다. 최근에 공부 방법에 관한 책을 읽으며
회고의 중요성을 다시 한번 깨닫긴 했지만 앞으로도 제대로 할 수 있을지는 또 다른 얘기..</p>

<p>또 해당 기업에서 이력서를 볼 때 가장 중요하게 생각하는 부분은 <strong>&lsquo;지원하는 포지션에 대한 이유&rsquo;</strong> 였다.
구직자의 입장에서도 중요하게 생각해야하는 부분이지만, 생각보다 그렇지 않은 경우가 많을 수 있다고 생각한다.
채용 공고에 명확한 job이 명시되어 있지 않은 경우가 생각보다 많았고, 웹 Back-end 라고 해서 모두 같은
업무를 진행하지 않기 때문에 조금 더 구체적인 job을 명시해주면 좋겠다는 <del>투정</del> 생각을 한다. 그렇다면
무작위적인 이력서 제출이 조금은 줄지 않을까?</p>

<h3 id="summary">Summary</h3>

<p>이력서 또는 면접에 관한 팁을 마지막으로 주셨는데, 내용은 다음과 같다.</p>

<ul>
<li>검색 또는 공고를 통해 지원하는 회사에 대한 정보를 습득할것.</li>
<li>검색 또는 공고를 통해 지원하는 회사의 <code>문화</code>가 나에게 잘 맞을지 고민해볼것</li>
<li>위 두가지 정보를 통해 내가 이 회사에 왜 필요한 사람인지 고민해볼것</li>
</ul>

<p>또한 위 정보들을 바탕으로 <strong>내가 이 회사에서 무엇을 얻을 수 있을것인가</strong> 도 고민해보는것이 좋다고 하셨다.</p>

<h2 id="두번째-회사-이-질문-왜-하신건가요">두번째 회사 - 이 질문 왜 하신건가요?</h2>

<p>두번째 회사에서는 면접에서 면접관들이 어떤 질문을 하고, 그 질문은 어떤 의도로 묻는것인지 말씀해 주시는 시간이었고
말씀을 정말 재밌게 잘 하셔서 집중이 정말 잘 됐었다.</p>

<h3 id="경력을-중심으로-자기소개-해보세요">경력을 중심으로 자기소개 해보세요.</h3>

<ul>
<li>거짓말 하려는 사람을 파악하고, 따라올 질문들에 대한 마중물 역할</li>
<li>따라서 솔직한 대답을 하는것이 좋고, 질문이 따라올 수 있도록 대답하는것이 좋겠다.</li>
<li>가능하다면 자신있게 대답할 수 있는 질문을 유도하는것이 면접 스킬.</li>
</ul>

<h3 id="그-이야기를-그림으로-그려주세요-왜-그렇게-그리셨나요">그 이야기를 그림으로 그려주세요. + 왜 그렇게 그리셨나요?</h3>

<ul>
<li>면접자의 업무 중 커뮤니케이션 능력을 확인하고자 하는 질문이다.</li>
<li>또한 해당 내용에 대한 이해도가 얼마나 되는지 파악할 수 있다.</li>
<li>내가 진행한 프로젝트의 구성은 제대로 파악하고 있는것이 좋겠다. <code>!해보기!</code></li>
</ul>

<h3 id="내가-해결한-문제-중-가장-마음에-들었던-결정">내가 해결한 문제 중 가장 마음에 들었던 결정</h3>

<h3 id="내가-해결한-문제-중-가장-아쉬운-결정-다시-한다면">내가 해결한 문제 중 가장 아쉬운 결정 + 다시 한다면?</h3>

<ul>
<li>결이 같은 질문이라 묶었다. 의도는 면접자의 학습 능력을 파악하기 위한 질문!</li>
<li>더 좋은 코드를 작성하고자 노력해야 대답할 수 있는 질문이라고 생각한다.</li>
<li>더 많이 고민하며 작성하는 습관을 들이는것이 가장 좋을것 같다. <code>!해보기!</code></li>
</ul>

<h3 id="질문이-있으시면-해주세요">질문이 있으시면 해주세요.</h3>

<ul>
<li>정말 질문이 있는지, 준비했지만 못한 이야기가 있는지 등을 듣기 위한 질문</li>
<li><strong>(X)</strong> 없는데요 || 단답형 대답이 나오는 질문 || 아부성 질문 || 불순한 목적의 질문</li>
<li><strong>(O)</strong> 정말로 궁금한점 || 면접의 맥락에 맞는 어투와 내용의 질문</li>
</ul>

<p>사실 여기까지만 듣고도 이런걸 묻는 회사에 가고싶다는 생각이 들었다. <del>면접 질문을 알았기 때문이 아니라</del>
정말 같이 <code>잘</code> 근무할 수 있고 좋은 사람을 뽑고자 노력하는 회사에 좋은 개발자들이 있는건 당연한 이야기지 않나?
이 세미나를 통해, 이 세션을 통해 좋은 회사를 가고싶다는 생각이 더욱 간절해졌다. (ㅠ)</p>

<h3 id="신입-또는-주니어에게-바라는-점-개발-능력-제외">신입 또는 주니어에게 바라는 점 (개발 능력 제외)</h3>

<ul>
<li>커뮤니케이션 능력 + Self motivation + Self Care ( 성찰 또는 <strong>회고</strong> ) + 꾸준함</li>
<li><strong>성장 가능성</strong> 또는 <strong>지속적인</strong> 자기 개발의 근거 ( Blog 또는 Github )</li>
<li>경험과 토이프로젝트</li>
<li>내 Application을 통한 <strong>End User</strong>를 만나는 경험</li>
<li>Feedback 을 받으며 개선방법을 고민해 본 경험</li>
<li><strong>Open Source Contribute</strong></li>
</ul>

<p>이 외에도 많은 질의응답이 있었지만 다 노트하지 않은 관계로&hellip; <del>PASS</del> 이 위에 적은 내용들만 숙지하고 준비해도
자신감있게 면접을 진행할 수 있을것 같다 <del>기술면접은..</del> 위 내용들을 기준으로 나만의 답안을 작성해봐야겠다.</p>

<p><br></p>
]]></content>
        </item>
        
        <item>
            <title>Go defer와 panic</title>
            <link>https://joonhak.github.io/posts/go-defer%EC%99%80-panic/</link>
            <pubDate>Sun, 17 Mar 2019 18:32:46 +0900</pubDate>
            
            <guid>https://joonhak.github.io/posts/go-defer%EC%99%80-panic/</guid>
            <description>최근 Golang에 흥미가 생겨 열심히 따라치는 공부하는 중인데, 이해가 안가는 부분이 있어서 정리해보고자 글을 작성한다.
Go의 defer 우선 Go의 defer 키워드는 뒤에 오는 코드를 나중에 (= 해당 함수 return 직전 또는 블록을 벗어나는 시점에) 실행시키는 키워드다. 한국어로는 지연호출이라고 볼 수 있겠다. 찾아본바로는 defer로 선언된 함수들을 stack에 담았다가 함수 종료 직전에 실행시킨다고 한다. 따라서 defer된 함수들의 호출 순서는 &amp;lsquo;먼저&amp;rsquo; 선언된 defer 함수가 &amp;lsquo;나중에&amp;rsquo; 실행된다.
func main() { defer fmt.Println(&amp;#34;world!&amp;#34;) defer fmt.</description>
            <content type="html"><![CDATA[

<p>최근 Golang에 흥미가 생겨 열심히 <del>따라치는</del> 공부하는 중인데, 이해가 안가는 부분이 있어서
 정리해보고자 글을 작성한다.</p>

<h2 id="go의-defer">Go의 defer</h2>

<p>우선 Go의 <code>defer</code> 키워드는 뒤에 오는 코드를 나중에 (= 해당 함수 return 직전 또는 블록을 벗어나는 시점에) 실행시키는 키워드다.
한국어로는 지연호출이라고 볼 수 있겠다. 찾아본바로는 <code>defer</code>로 선언된 함수들을 <code>stack</code>에 담았다가 함수 종료 직전에 실행시킨다고 한다.
따라서 <code>defer</code>된 함수들의 호출 순서는 &lsquo;먼저&rsquo; 선언된 <code>defer</code> 함수가 &lsquo;나중에&rsquo; 실행된다.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;world!&#34;</span><span class="p">)</span>
    <span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;joonhak&#34;</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Hello&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// Hello
</span><span class="c1">// joonhak
</span><span class="c1"></span><span class="o">//</span> <span class="nx">world</span><span class="p">!</span></code></pre></div>
<p>먼저 작성한 <code>world</code> 메세지가 나중에 출력되는 결과를 확인할 수 있다. 간단한 <del>대충한</del> 설명은 여기까지 하고,
내가 이상하다고 느낀 부분을 설명하기 위해 go의 다른 부분을 또 설명해야한다.</p>

<h2 id="go의-panic">Go의 panic</h2>

<p><code>panic()</code>은 Go의 내장 함수다. panic 함수는 의도치 않은 상황에서 발생하며 프로그램의 실행을 중지시킨다.
java에서의 <code>Exception</code>과 비슷한 역할을 하며, 작성된 코드의 문제로 발생하는 <code>Runtime Error</code> (index out of bound 등)
 뿐만 아니라 <code>panic()</code> 함수를 호출하여 개발자가 원하는 상황에 직접 에러를 발생시킬 수 있다. 여러 블로그등의 글에 의하면</p>

<blockquote>
<p>Go 내장함수인 <code>panic()</code>함수는 현재 함수를 즉시 멈추고 현재 함수에 defer 함수들을 모두 실행한 후 즉시 리턴한다.</p>

<p><a href="http://golang.site/go/article/20-Go-defer%EC%99%80-panic" target="_blank">출처 - 예제로 배우는 Go 프로그래밍</a></p>
</blockquote>

<p>라고 설명해주고 있고, 실제로 <code>defer</code>와 <code>panic()</code>을 설명할 때 가장 많이 쓰이는 예제 또한 다음과 같다.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">import</span> <span class="s">&#34;os&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;Invalid.txt&#34;</span><span class="p">)</span> <span class="c1">// 존재하지 않는 파일 호출
</span><span class="c1"></span>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span> <span class="c1">// 또는 fmt.Println(err.Error()) 등.
</span><span class="c1"></span>    <span class="p">}</span>
    <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
<span class="p">}</span></code></pre></div>
<p>위 예제에서 <code>panic()</code>이 실행될 때, 현재 스코프 (함수 또는 블럭: {})의 <code>defer</code>된 함수들을 모두 실행시키고 종료된다는
의미로 이해되지만, 실제로 <code>f.Close()</code>가 실행되는지 어떻게 확인해볼까 고민하다가 예제 코드를 다음과 같이 고쳐보았다.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="s">&#34;os&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;Invalid.txt&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="nf">closeFile</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">closeFile</span><span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">os</span><span class="p">.</span><span class="nx">File</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Do deferred function..&#34;</span><span class="p">)</span>
    <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
<span class="p">}</span>

<span class="o">//</span> <span class="nx">panic</span><span class="p">:</span> <span class="nx">open</span> <span class="err">~~~</span></code></pre></div>
<p>내가 이해한대로라면 존재하지 않는 경로의 파일을 열려고 시도하기 때문에 <code>panic()</code>이 발생하고
<code>defer</code>된 <code>closeFile()</code>함수가 실행되면서 console에 &ldquo;Do deferred function..&rdquo; 이라는 메세지가 찍혀야 한다.
하지만 실행 결과는 생각과 달랐다. <code>panic()</code>만 실행됐고, 메세지는 찍히지 않았다. 내가 뭘 잘못한건지 고민해보다가,
Hoxy.. 하고 코드 순서를 다음과 같이 고쳐봤다.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// import
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;Invalid.txt&#34;</span><span class="p">)</span>
    <span class="k">defer</span> <span class="nf">closeFile</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// closeFile()
</span><span class="c1"></span>
<span class="c1">// Do deferred function..
</span><span class="c1"></span><span class="o">//</span> <span class="nx">panic</span><span class="p">:</span> <span class="nx">open</span> <span class="err">~~~</span></code></pre></div>
<p>그랬더니 console에 메세지가 찍혔다. 사실, 생각해보면 당연한 일이다. <code>panic()</code>이 java로 치면 <code>Exception</code>을 내며
프로그램을 종료시키는 함순데, 프로그램이 종료된 후 메세지가 찍힐리 만무하지.. 예제는 잘못된 예제였고
원하는 결과를 얻으려면 마지막 순서로 코드를 작성해야 한다. 결국 <code>panic()</code>함수가 현재 함수의 <code>defer</code>된 함수들을
실행시키고 종료한다는 말의 의미를 이해하기 쉽게 말하자면, &lsquo;현재까지 defer된&rsquo; 함수들을 실행시킨 후 종료한다고
이야기해야 조금 더 맞는 말이라고 생각된다. 사실 여러 글을 보면 <code>defer</code>가 다른 언어의 <code>finally</code>등의 문법보다 읽기 쉽고
작성하기 쉽다고 많이 설명하던데.. <del>모르겠다</del></p>

<h2 id="summary">Summary</h2>

<ol>
<li><code>panic()</code>함수가 같은 함수 내의 모든 <code>defer</code>된 함수를 실행시키고 종료된다고 이해했다.</li>
<li>사실이 아니었다.</li>
<li><code>panic()</code>이 실행되기 전(비정상 종료되기 전)에 무언가를 실행시키고 싶다면 <code>panic()</code>보다 앞에 <code>defer</code> 함수를 작성해라.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>동시성과 병렬성</title>
            <link>https://joonhak.github.io/posts/%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1/</link>
            <pubDate>Tue, 12 Mar 2019 17:01:17 +0900</pubDate>
            
            <guid>https://joonhak.github.io/posts/%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1/</guid>
            <description>동시성(Concurrency) 동시성은 작업을 작은 시간단위로 나누어 연산하는것을 의미한다.
나눈다는 말에서 느낄 수 있듯, 시간을 나누어 연산한다는것은
실제로 동시에 연산이 진행되는것이 아니라 동시에 연산되는것 처럼
보인다는 의미이다. 공부를 하면서 동시에 카톡을 한다면..
따라서 동시성 프로그래밍은 코어의 개수가 중요하지 않다.
병렬성(Parallelism) 병렬성은 실제 다른 코어들이 동시에 연산하는것을 의미한다.
따라서 단일 코어환경, 또는 단일 쓰레드환경 에서는 병렬 프로그래밍이 불가능하고,
동시성 프로그래밍과 다르게 실제로 동시에 연산된다.
Summary 동시성과 병렬성은 비슷하게 들리지만 동시성은 작업을 나누어 하는것,</description>
            <content type="html"><![CDATA[

<h2 id="동시성-concurrency">동시성(Concurrency)</h2>

<p>동시성은 작업을 <code>작은 시간단위로</code> 나누어 연산하는것을 의미한다.<br />
나눈다는 말에서 느낄 수 있듯, 시간을 나누어 연산한다는것은<br />
실제로 동시에 연산이 진행되는것이 아니라 동시에 연산되는것 <code>처럼</code><br />
보인다는 의미이다. <del>공부를 하면서 동시에 카톡을 한다면..</del><br />
따라서 동시성 프로그래밍은 코어의 개수가 중요하지 않다.</p>

<h2 id="병렬성-parallelism">병렬성(Parallelism)</h2>

<p>병렬성은 실제 <code>다른 코어</code>들이 <code>동시에</code> 연산하는것을 의미한다.<br />
따라서 단일 코어환경, 또는 단일 쓰레드환경 에서는 병렬 프로그래밍이 불가능하고,<br />
동시성 프로그래밍과 다르게 실제로 <code>동시에</code> 연산된다.</p>

<h2 id="summary">Summary</h2>

<p>동시성과 병렬성은 비슷하게 들리지만 동시성은 작업을 나누어 하는것,<br />
병렬성은 실제로 동시에 작업하는것을 의미한다고 결론지을 수 있을것 같다.<br />
<del>말로는 그럴싸 한데.. 코드로는?</del></p>

<h2 id="ref">Ref</h2>

<ul>
<li><a href="https://atin.tistory.com/567" target="_blank">동시성(Concurrency) VS 병렬성(Parallelism)</a></li>
<li><a href="https://seohs.tistory.com/461" target="_blank">동시성(Concurrency)과 병렬성(Parallelism)</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Go 시작하기</title>
            <link>https://joonhak.github.io/posts/go-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</link>
            <pubDate>Sat, 09 Mar 2019 16:02:46 +0900</pubDate>
            
            <guid>https://joonhak.github.io/posts/go-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</guid>
            <description>Why golang?  퇴사 후 여러 언어를 해보고싶은 욕심에 python과 node를 조금 해봤는데, 사실 동적타입 언어에 대한 막연한 거부감 때문에 망설이던 중 &amp;lsquo;Golang을 해보자!&amp;rsquo; 하는 생각이 들었다. 사실은 이 블로그의 정적 사이트 생성기를 Hugo로 정한것도 &amp;lsquo;Hoxy.. Go를 조금 써 볼 기회가 있지 않을까?&amp;rsquo; 하는 생각 때문이었다. (하지만 써 볼 기회는 없었&amp;hellip;.) 각설하고, golang 설치부터 해보겠다.
golang 설치 환경설정은 항상 설렌다. 나는 Windows + intellij (ultimate) 환경에서 진행할 예정이다. 우선 golang 다운로드 페이지로 가서 자신의 운영체제에 맞게 설치하면 되고 Next만 눌렀다면 C:\go에, 경로를 따로 잡아줬으면 해당 경로에 설치된다.</description>
            <content type="html"><![CDATA[

<p><img src="https://golang.org/doc/gopher/frontpage.png" style="margin: 0 auto;" alt="golang"></p>

<h2 id="why-golang">Why golang? 　</h2>

<p>퇴사 후 여러 언어를 해보고싶은 욕심에 python과 node를 조금 해봤는데,
사실 동적타입 언어에 대한 막연한 거부감 때문에 망설이던 중
&lsquo;Golang을 해보자!&rsquo; 하는 생각이 들었다. 사실은 이 블로그의 정적 사이트 생성기를
Hugo로 정한것도 &lsquo;Hoxy.. Go를 조금 써 볼 기회가 있지 않을까?&rsquo; 하는 생각 때문이었다.
<del>(하지만 써 볼 기회는 없었&hellip;.)</del> 각설하고, golang 설치부터 해보겠다.</p>

<h2 id="golang-설치">golang 설치</h2>

<p><del>환경설정은 항상 설렌다.</del>
나는 Windows + intellij (ultimate) 환경에서 진행할 예정이다.
우선 <a href="https://golang.org/dl/" target="_blank">golang 다운로드 페이지</a>로 가서 자신의 운영체제에 맞게 설치하면 되고
Next만 눌렀다면 <code>C:\go</code>에, 경로를 따로 잡아줬으면 해당 경로에 설치된다.
나는 개발 resource들을 따로 관리하는 편이라서 <code>C:\DEV\go</code>에 설치했다.</p>

<h2 id="intellij에-plugin-설치">Intellij에 plugin 설치</h2>

<p>Intellij는 기본적으로 Go를 위한 ide가 아니라서 따로 plugin을 설치해야한다.
설치 후 Go 프로젝트를 만들면 된다.
<img src="https://user-images.githubusercontent.com/43231532/54068263-55930b00-428e-11e9-9362-6ac217a9bb20.png" alt="Intellij go plugin" />
<br/>
<img src="https://user-images.githubusercontent.com/43231532/54068785-b709a880-4293-11e9-9a2c-b07566788760.png" alt="Go project" />
<br/>
프로젝트는 원하는 위치에 생성하고, 실행확인을 위해 test.go 파일을 생성한다.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nb">println</span><span class="p">(</span><span class="s">&#34;Hello world!&#34;</span><span class="p">)</span>
<span class="p">}</span></code></pre></div>
<p><img src="https://user-images.githubusercontent.com/43231532/54069931-a6aafb00-429e-11e9-9411-b69f2050776c.png" alt="Run go file" />
실행 방법은 위 이미지 위치에 있는 버튼을 클릭하거나, terminal에</p>

<pre><code>&gt; go run test.go
</code></pre>

<p>를 입력하면 Hello world가 출력된다! <del>이제 나도 Go 개발자</del></p>

<h2 id="실행-중-문제-발생한-경우">실행 중 문제 발생한 경우</h2>

<p>Go 실행에 필요한 환경변수로 두가지가 존재한다.<br />
<br/>
<code>GOROOT</code><br />
&gt; Go가 설치된 경로 (윈도우의 경우 <code>C:\go</code> 가 기본 경로)<br />
&gt; Go 설치 시 자동으로 설정되지만 문제가 있을경우 설치 경로와 비교해볼것<br />
<br/>
<code>GOPATH</code><br />
&gt; Go의 표준 패키지 이외의 3rd party, 사용자 정의 패키지들을 <code>GOPATH</code>에서 찾는다.
&gt; 패키지 활용 중 문제 발생 시 확인해볼것<br />
<br/>
<code>go env</code><br />
Go는 현재 환경변수가 어떻게 설정되어있는지 확인 할 수 있는 명령어를 제공한다. terminal에
<code>go env</code> 명령어를 입력하면 확인 가능하다.
<br style="margin-bottom: 1rem;"/><br />
<img src="https://user-images.githubusercontent.com/43231532/54070507-28515780-42a4-11e9-90ec-42df051d1471.png" alt="'go env' result" /></p>

<h2 id="toc_4">　</h2>

<p>Go 첫 시작도 첫 시작인데, 포스트 작성하면서 해보려니까 너무 오래걸린다..
다음번엔 다 해보고 작성해야지..</p>

<h2 id="ref">ref</h2>

<ul>
<li><a href="http://golang.site/go/article/2-Go-%EC%84%A4%EC%B9%98%EC%99%80-Go-%ED%8E%B8%EC%A7%91%EA%B8%B0-%EC%86%8C%EA%B0%9C" target="_blank">예제로 배우는 Go 프로그래밍 - 설치와 편집기 소개</a>
<br /></li>
</ul>

<p><br/></p>
]]></content>
        </item>
        
        <item>
            <title>Welcome</title>
            <link>https://joonhak.github.io/posts/welcome/</link>
            <pubDate>Wed, 06 Mar 2019 21:23:37 +0900</pubDate>
            
            <guid>https://joonhak.github.io/posts/welcome/</guid>
            <description> Welcome to my hugo-blog! </description>
            <content type="html"><![CDATA[

<h2 id="welcome-to-my-hugo-blog">Welcome to my hugo-blog!</h2>
]]></content>
        </item>
        
    </channel>
</rss>
