<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 프린이의 DEVLOG</title>
        <link>https://joonhak.github.io/posts/</link>
        <description>Recent content in Posts on 프린이의 DEVLOG</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 17 Mar 2019 18:32:46 +0900</lastBuildDate>
        <atom:link href="https://joonhak.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Go_defer와_panic</title>
            <link>https://joonhak.github.io/posts/go_defer%EC%99%80_panic/</link>
            <pubDate>Sun, 17 Mar 2019 18:32:46 +0900</pubDate>
            
            <guid>https://joonhak.github.io/posts/go_defer%EC%99%80_panic/</guid>
            <description>최근 Golang에 흥미가 생겨 열심히 따라치는 공부하는 중인데, 이해가 안가는 부분이 있어서 정리해보고자 글을 작성한다.
Go의 defer 우선 Go의 defer 키워드는 뒤에 오는 코드를 나중에 (= 해당 함수 return 직전 또는 블록을 벗어나는 시점에) 실행시키는 키워드다. 한국어로는 지연호출이라고 볼 수 있겠다. 찾아본바로는 defer로 선언된 함수들을 stack에 담았다가 함수 종료 직전에 실행시킨다고 한다. 따라서 defer된 함수들의 호출 순서는 &amp;lsquo;먼저&amp;rsquo; 선언된 defer 함수가 &amp;lsquo;나중에&amp;rsquo; 실행된다.
func main() { defer fmt.Println(&amp;#34;world!&amp;#34;) defer fmt.</description>
            <content type="html"><![CDATA[

<p>최근 Golang에 흥미가 생겨 열심히 <del>따라치는</del> 공부하는 중인데, 이해가 안가는 부분이 있어서
 정리해보고자 글을 작성한다.</p>

<h2 id="go의-defer">Go의 defer</h2>

<p>우선 Go의 <code>defer</code> 키워드는 뒤에 오는 코드를 나중에 (= 해당 함수 return 직전 또는 블록을 벗어나는 시점에) 실행시키는 키워드다.
한국어로는 지연호출이라고 볼 수 있겠다. 찾아본바로는 <code>defer</code>로 선언된 함수들을 <code>stack</code>에 담았다가 함수 종료 직전에 실행시킨다고 한다.
따라서 <code>defer</code>된 함수들의 호출 순서는 &lsquo;먼저&rsquo; 선언된 <code>defer</code> 함수가 &lsquo;나중에&rsquo; 실행된다.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;world!&#34;</span><span class="p">)</span>
    <span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;joonhak&#34;</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Hello&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// Hello
</span><span class="c1">// joonhak
</span><span class="c1"></span><span class="o">//</span> <span class="nx">world</span><span class="p">!</span></code></pre></div>
<p>먼저 작성한 <code>world</code> 메세지가 나중에 출력되는 결과를 확인할 수 있다. 간단한 <del>대충한</del> 설명은 여기까지 하고,
내가 이상하다고 느낀 부분을 설명하기 위해 go의 다른 부분을 또 설명해야한다.</p>

<h2 id="go의-panic">Go의 panic</h2>

<p><code>panic()</code>은 Go의 내장 함수다. panic 함수는 의도치 않은 상황에서 발생하며 프로그램의 실행을 중지시킨다.
java에서의 <code>Exception</code>과 비슷한 역할을 하며, 작성된 코드의 문제로 발생하는 <code>Runtime Error</code> (index out of bound 등)
 뿐만 아니라 <code>panic()</code> 함수를 호출하여 개발자가 원하는 상황에 직접 에러를 발생시킬 수 있다. 여러 블로그등의 글에 의하면</p>

<blockquote>
<p>Go 내장함수인 <code>panic()</code>함수는 현재 함수를 즉시 멈추고 현재 함수에 defer 함수들을 모두 실행한 후 즉시 리턴한다.</p>

<p><a href="http://golang.site/go/article/20-Go-defer%EC%99%80-panic" target="_blank">출처 - 예제로 배우는 Go 프로그래밍</a></p>
</blockquote>

<p>라고 설명해주고 있고, 실제로 <code>defer</code>와 <code>panic()</code>을 설명할 때 가장 많이 쓰이는 예제 또한 다음과 같다.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">import</span> <span class="s">&#34;os&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;Invalid.txt&#34;</span><span class="p">)</span> <span class="c1">// 존재하지 않는 파일 호출
</span><span class="c1"></span>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span> <span class="c1">// 또는 fmt.Println(err.Error()) 등.
</span><span class="c1"></span>    <span class="p">}</span>
    <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
<span class="p">}</span></code></pre></div>
<p>위 예제에서 <code>panic()</code>이 실행될 때, 현재 스코프 (함수 또는 블럭: {})의 <code>defer</code>된 함수들을 모두 실행시키고 종료된다는
의미로 이해되지만, 실제로 <code>f.Close()</code>가 실행되는지 어떻게 확인해볼까 고민하다가 예제 코드를 다음과 같이 고쳐보았다.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="s">&#34;os&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;Invalid.txt&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="nf">closeFile</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">closeFile</span><span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">os</span><span class="p">.</span><span class="nx">File</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Do deferred function..&#34;</span><span class="p">)</span>
    <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
<span class="p">}</span>

<span class="o">//</span> <span class="nx">panic</span><span class="p">:</span> <span class="nx">open</span> <span class="err">~~~</span></code></pre></div>
<p>내가 이해한대로라면 존재하지 않는 경로의 파일을 열려고 시도하기 때문에 <code>panic()</code>이 발생하고
<code>defer</code>된 <code>closeFile()</code>함수가 실행되면서 console에 &ldquo;Do deferred function..&rdquo; 이라는 메세지가 찍혀야 한다.
하지만 실행 결과는 생각과 달랐다. <code>panic()</code>만 실행됐고, 메세지는 찍히지 않았다. 내가 뭘 잘못한건지 고민해보다가,
Hoxy.. 하고 코드 순서를 다음과 같이 고쳐봤다.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// import
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;Invalid.txt&#34;</span><span class="p">)</span>
    <span class="k">defer</span> <span class="nf">closeFile</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// closeFile()
</span><span class="c1"></span>
<span class="c1">// Do deferred function..
</span><span class="c1"></span><span class="o">//</span> <span class="nx">panic</span><span class="p">:</span> <span class="nx">open</span> <span class="err">~~~</span></code></pre></div>
<p>그랬더니 console에 메세지가 찍혔다. 사실, 생각해보면 당연한 일이다. <code>panic()</code>이 java로 치면 <code>Exception</code>을 내며
프로그램을 종료시키는 함순데, 프로그램이 종료된 후 메세지가 찍힐리 만무하지.. 예제는 잘못된 예제였고
원하는 결과를 얻으려면 마지막 순서로 코드를 작성해야 한다. 결국 <code>panic()</code>함수가 현재 함수의 <code>defer</code>된 함수들을
실행시키고 종료한다는 말의 의미를 이해하기 쉽게 말하자면, &lsquo;현재까지 defer된&rsquo; 함수들을 실행시킨 후 종료한다고
이야기해야 조금 더 맞는 말이라고 생각된다. 사실 여러 글을 보면 <code>defer</code>가 다른 언어의 <code>finally</code>등의 문법보다 읽기 쉽고
작성하기 쉽다고 많이 설명하던데.. <del>모르겠다</del></p>

<h2 id="summary">Summary</h2>

<ol>
<li><code>panic()</code>함수가 같은 함수 내의 모든 <code>defer</code>된 함수를 실행시키고 종료된다고 이해했다.</li>
<li>사실이 아니었다.</li>
<li><code>panic()</code>이 실행되기 전(비정상 종료되기 전)에 무언가를 실행시키고 싶다면 <code>panic()</code>보다 앞에 <code>defer</code> 함수를 작성해라.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>동시성과_병렬성</title>
            <link>https://joonhak.github.io/posts/%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC_%EB%B3%91%EB%A0%AC%EC%84%B1/</link>
            <pubDate>Tue, 12 Mar 2019 17:01:17 +0900</pubDate>
            
            <guid>https://joonhak.github.io/posts/%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC_%EB%B3%91%EB%A0%AC%EC%84%B1/</guid>
            <description>동시성(Concurrency) 동시성은 작업을 작은 시간단위로 나누어 연산하는것을 의미한다.
나눈다는 말에서 느낄 수 있듯, 시간을 나누어 연산한다는것은
실제로 동시에 연산이 진행되는것이 아니라 동시에 연산되는것 처럼
보인다는 의미이다. 공부를 하면서 동시에 카톡을 한다면..
따라서 동시성 프로그래밍은 코어의 개수가 중요하지 않다.
병렬성(Parallelism) 병렬성은 실제 다른 코어들이 동시에 연산하는것을 의미한다.
따라서 단일 코어환경, 또는 단일 쓰레드환경 에서는 병렬 프로그래밍이 불가능하고,
동시성 프로그래밍과 다르게 실제로 동시에 연산된다.
Summary 동시성과 병렬성은 비슷하게 들리지만 동시성은 작업을 나누어 하는것,</description>
            <content type="html"><![CDATA[

<h2 id="동시성-concurrency">동시성(Concurrency)</h2>

<p>동시성은 작업을 <code>작은 시간단위로</code> 나누어 연산하는것을 의미한다.<br />
나눈다는 말에서 느낄 수 있듯, 시간을 나누어 연산한다는것은<br />
실제로 동시에 연산이 진행되는것이 아니라 동시에 연산되는것 <code>처럼</code><br />
보인다는 의미이다. <del>공부를 하면서 동시에 카톡을 한다면..</del><br />
따라서 동시성 프로그래밍은 코어의 개수가 중요하지 않다.</p>

<h2 id="병렬성-parallelism">병렬성(Parallelism)</h2>

<p>병렬성은 실제 <code>다른 코어</code>들이 <code>동시에</code> 연산하는것을 의미한다.<br />
따라서 단일 코어환경, 또는 단일 쓰레드환경 에서는 병렬 프로그래밍이 불가능하고,<br />
동시성 프로그래밍과 다르게 실제로 <code>동시에</code> 연산된다.</p>

<h2 id="summary">Summary</h2>

<p>동시성과 병렬성은 비슷하게 들리지만 동시성은 작업을 나누어 하는것,<br />
병렬성은 실제로 동시에 작업하는것을 의미한다고 결론지을 수 있을것 같다.<br />
<del>말로는 그럴싸 한데.. 코드로는?</del></p>

<h2 id="ref">Ref</h2>

<ul>
<li><a href="https://atin.tistory.com/567" target="_blank">동시성(Concurrency) VS 병렬성(Parallelism)</a></li>
<li><a href="https://seohs.tistory.com/461" target="_blank">동시성(Concurrency)과 병렬성(Parallelism)</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Go_시작하기</title>
            <link>https://joonhak.github.io/posts/go_%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</link>
            <pubDate>Sat, 09 Mar 2019 16:02:46 +0900</pubDate>
            
            <guid>https://joonhak.github.io/posts/go_%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</guid>
            <description>Why golang?  퇴사 후 여러 언어를 해보고싶은 욕심에 python과 node를 조금 해봤는데, 사실 동적타입 언어에 대한 막연한 거부감 때문에 망설이던 중 &amp;lsquo;Golang을 해보자!&amp;rsquo; 하는 생각이 들었다. 사실은 이 블로그의 정적 사이트 생성기를 Hugo로 정한것도 &amp;lsquo;Hoxy.. Go를 조금 써 볼 기회가 있지 않을까?&amp;rsquo; 하는 생각 때문이었다. (하지만 써 볼 기회는 없었&amp;hellip;.) 각설하고, golang 설치부터 해보겠다.
golang 설치 환경설정은 항상 설렌다. 나는 Windows + intellij (ultimate) 환경에서 진행할 예정이다. 우선 golang 다운로드 페이지로 가서 자신의 운영체제에 맞게 설치하면 되고 Next만 눌렀다면 C:\go에, 경로를 따로 잡아줬으면 해당 경로에 설치된다.</description>
            <content type="html"><![CDATA[

<p><img src="https://golang.org/doc/gopher/frontpage.png" style="margin: 0 auto;" alt="golang"></p>

<h2 id="why-golang">Why golang? 　</h2>

<p>퇴사 후 여러 언어를 해보고싶은 욕심에 python과 node를 조금 해봤는데,
사실 동적타입 언어에 대한 막연한 거부감 때문에 망설이던 중
&lsquo;Golang을 해보자!&rsquo; 하는 생각이 들었다. 사실은 이 블로그의 정적 사이트 생성기를
Hugo로 정한것도 &lsquo;Hoxy.. Go를 조금 써 볼 기회가 있지 않을까?&rsquo; 하는 생각 때문이었다.
<del>(하지만 써 볼 기회는 없었&hellip;.)</del> 각설하고, golang 설치부터 해보겠다.</p>

<h2 id="golang-설치">golang 설치</h2>

<p><del>환경설정은 항상 설렌다.</del>
나는 Windows + intellij (ultimate) 환경에서 진행할 예정이다.
우선 <a href="https://golang.org/dl/" target="_blank">golang 다운로드 페이지</a>로 가서 자신의 운영체제에 맞게 설치하면 되고
Next만 눌렀다면 <code>C:\go</code>에, 경로를 따로 잡아줬으면 해당 경로에 설치된다.
나는 개발 resource들을 따로 관리하는 편이라서 <code>C:\DEV\go</code>에 설치했다.</p>

<h2 id="intellij에-plugin-설치">Intellij에 plugin 설치</h2>

<p>Intellij는 기본적으로 Go를 위한 ide가 아니라서 따로 plugin을 설치해야한다.
설치 후 Go 프로젝트를 만들면 된다.
<img src="https://user-images.githubusercontent.com/43231532/54068263-55930b00-428e-11e9-9362-6ac217a9bb20.png" alt="Intellij go plugin" />
<br/>
<img src="https://user-images.githubusercontent.com/43231532/54068785-b709a880-4293-11e9-9a2c-b07566788760.png" alt="Go project" />
<br/>
프로젝트는 원하는 위치에 생성하고, 실행확인을 위해 test.go 파일을 생성한다.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nb">println</span><span class="p">(</span><span class="s">&#34;Hello world!&#34;</span><span class="p">)</span>
<span class="p">}</span></code></pre></div>
<p><img src="https://user-images.githubusercontent.com/43231532/54069931-a6aafb00-429e-11e9-9411-b69f2050776c.png" alt="Run go file" />
실행 방법은 위 이미지 위치에 있는 버튼을 클릭하거나, terminal에</p>

<pre><code>&gt; go run test.go
</code></pre>

<p>를 입력하면 Hello world가 출력된다! <del>이제 나도 Go 개발자</del></p>

<h2 id="실행-중-문제-발생한-경우">실행 중 문제 발생한 경우</h2>

<p>Go 실행에 필요한 환경변수로 두가지가 존재한다.<br />
<br/>
<code>GOROOT</code><br />
&gt; Go가 설치된 경로 (윈도우의 경우 <code>C:\go</code> 가 기본 경로)<br />
&gt; Go 설치 시 자동으로 설정되지만 문제가 있을경우 설치 경로와 비교해볼것<br />
<br/>
<code>GOPATH</code><br />
&gt; Go의 표준 패키지 이외의 3rd party, 사용자 정의 패키지들을 <code>GOPATH</code>에서 찾는다.
&gt; 패키지 활용 중 문제 발생 시 확인해볼것<br />
<br/>
<code>go env</code><br />
Go는 현재 환경변수가 어떻게 설정되어있는지 확인 할 수 있는 명령어를 제공한다. terminal에
<code>go env</code> 명령어를 입력하면 확인 가능하다.
<br style="margin-bottom: 1rem;"/><br />
<img src="https://user-images.githubusercontent.com/43231532/54070507-28515780-42a4-11e9-90ec-42df051d1471.png" alt="'go env' result" /></p>

<h2 id="toc_4">　</h2>

<p>Go 첫 시작도 첫 시작인데, 포스트 작성하면서 해보려니까 너무 오래걸린다..
다음번엔 다 해보고 작성해야지..</p>

<h2 id="ref">ref</h2>

<ul>
<li><a href="http://golang.site/go/article/2-Go-%EC%84%A4%EC%B9%98%EC%99%80-Go-%ED%8E%B8%EC%A7%91%EA%B8%B0-%EC%86%8C%EA%B0%9C" target="_blank">예제로 배우는 Go 프로그래밍 - 설치와 편집기 소개</a>
<br /></li>
</ul>

<p><br/></p>
]]></content>
        </item>
        
        <item>
            <title>Welcome</title>
            <link>https://joonhak.github.io/posts/welcome/</link>
            <pubDate>Wed, 06 Mar 2019 21:23:37 +0900</pubDate>
            
            <guid>https://joonhak.github.io/posts/welcome/</guid>
            <description> Welcome to my hugo-blog! </description>
            <content type="html"><![CDATA[

<h2 id="welcome-to-my-hugo-blog">Welcome to my hugo-blog!</h2>
]]></content>
        </item>
        
    </channel>
</rss>
